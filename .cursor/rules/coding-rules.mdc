---
description: 
globs: 
alwaysApply: true
---
## 1. プロジェクト構造

### 1.1 ディレクトリ構造
```
lib/
  ├── main.dart         # アプリケーションのエントリーポイント
  ├── core/             # アプリケーションのコア機能
  │   ├── constants/    # 定数とアプリケーション設定
  │   ├── exceptions/   # 例外クラス
  │   ├── network/      # ネットワーク関連（インターセプターなど）
  │   └── utils/        # ユーティリティ関数とエクステンション
  ├── data/             # データレイヤー
  │   ├── datasources/  # データソース（APIクライアントなど）
  │   ├── models/       # データモデル（Freezedモデルなど）
  │   ├── repositories/ # リポジトリの実装
  │   ├── local/        # ローカルデータ関連
  │   └── services/     # 外部サービス連携
  ├── domain/           # ドメインレイヤー
  │   ├── entities/     # ドメインエンティティ
  │   ├── repositories/ # リポジトリのインターフェース
  │   └── use_cases/    # ビジネスロジックをカプセル化
  ├── presentation/     # プレゼンテーションレイヤー
  │   ├── view_models/  # ViewModel（Riverpodによる状態管理）
  │   ├── views/        # 画面単位のView
  │   ├── widgets/      # 再利用可能なカスタムWidget
  │   └── extensions/   # widgetの拡張機能
  ├── di/               # 依存性注入
  └── routes/           # ルーティング(go_router)
```

### 1.2 レイヤー間の依存関係
- presentationはdomainに依存可能
- domainはcoreに依存可能
- dataはdomainとcoreに依存可能
- coreは他のレイヤーに依存してはならない

## 2. 命名規則

### 2.1 ファイル名
- スネークケースを使用
- ファイルの役割が明確になる名前を付ける
- 自動生成されるファイルは規約に従う: `file_name.g.dart`, `file_name.freezed.dart`

### 2.2 クラス名
- パスカルケースを使用
- 役割を表す接尾辞を付ける: `*ViewModel`, `*Repository`, `*Util`, `*Provider`

### 2.3 変数・メソッド名
- キャメルケースを使用
- プライベートメンバには先頭にアンダースコアを付ける
- 定数（static const）は大文字のスネークケースを使用

### 2.4 列挙型とプロパティ
- 列挙型はパスカルケース
- プロパティ名はキャメルケース

## 3. ドキュメンテーション

### 3.1 クラスドキュメント
```dart
/// -----------------------------------------------
/// [概要]   :クラスの概要説明
/// [作成者] :{会社名略} {開発者名}
/// [作成日] :yyyy/MM/dd
/// -----------------------------------------------
///
/// 詳細な説明をここに記述します。
/// 複数行に渡る説明の場合は適切に改行します。
```

### 3.2 メソッドドキュメント
```dart
/// -----------------------------------------------
/// メソッドの概要説明
/// -----------------------------------------------
///
/// 引数:
/// * [param1] - パラメータ1の説明
/// * [param2] - パラメータ2の説明
///
/// 戻り値:
/// * 戻り値の型と説明
///
/// 例外:
/// * 発生する可能性のある例外
```

### 3.3 重要なロジックへのコメント
- 複雑なロジックには行コメント（`//`）で説明を追加する
- TODOコメント: `//TODO: ●●する`

## 4. 状態管理

### 4.1 Riverpodの使用
- 状態管理には Riverpod を使用し、`@riverpod` アノテーションを活用する
- 適切なアノテーションを選択（@riverpod, @Riverpod(keepAlive: true)など）
- コード生成には `build_runner` と `riverpod_generator` を使用
    - アノテーション使用のファイルを編集した場合、編集直後に毎回ビルドランナーを必ず実行する
- setStateを使用しての画面描画更新はできるだけ使用しない。基本的にはRiverpodを使用する。

### 4.2 ViewModel
- 状態とビジネスロジックを管理するViewModelを作成
- UIからのアクションはViewModelで処理
- ViewModel はドメインレイヤーのリポジトリに依存する
- 複雑なViewModelは、内容ごとにファイルを分けるか、そもそものロジックを分離してファイル分け出来るようにする。（大きな変更はユーザーに確認してから作業する）

## 5. エラーハンドリング

### 5.1 例外の捕捉と処理
- try-catchブロックでの例外の捕捉
- エラーのログ記録には talker を使用
```dart
try {
  // 処理
} catch (e, stackTrace) {
  talker.error(e, stackTrace);
}
```
- そのロジックで例外を処理しないのであれば、talkerログだけ出力してrethrowする必要があるかも状況によっては考慮する。

### 5.2 ネットワークエラー処理
- Dioインターセプターでネットワークエラーを統一的に処理
    - ここでまとめてエラーメッセージを表示するので、基本的に各画面ではDio系のエラー対策は不要
- タイムアウトなど特定のエラー種別に対する特別な処理を共通で実装済

## 6. 非同期処理

### 6.1 Future/async-await
- 非同期処理には async/await パターンを優先

### 6.2 ローディング状態
- ローディング状態は専用のプロバイダーで管理

### 6.3 非同期と画面更新が関わる場合
- Future.microstackなどでビルドタイミングでの操作をしないようにするなど、場面ごとで制御を入れる必要がある
- 非同期処理と画面更新とプロバイダーの処理順序に注意が必要
- dispose後の画面の変更を防ぐため、mountedチェックを必要に応じて挿入する

## 7. ユーティリティと拡張機能

### 7.1 ユーティリティクラス
- 汎用的な機能はユーティリティクラスに集約
- ユーティリティクラスはstaticメソッドを持つ

### 7.2 拡張メソッド
- コンテキスト依存の機能は拡張メソッドで実装
```dart
extension SizeExtension on BuildContext {
  double fixedSize(double size) {
    // 実装
  }
}
```

## 8. データモデル

### 8.1 イミュータブルデータモデル
- データモデルはfreezedを使用してイミュータブルに定義
```dart
@freezed
class DialogData with _$DialogData {
  const factory DialogData({
    String? code,
    required String message,
    required DialogType dialogType,
    @Default(false) bool hideOkButton,
  }) = _DialogData;
}
```
- DDD駆動設計なので、各層で必要に応じてModelクラスを作成する
- @freezedを使用したファイルは、編集後すぐにビルドランナーを実行する

### 8.2 シリアライゼーション
- JSONとの相互変換はfrom/toJsonメソッドを使用
- RetrofitとDioを使用したAPI通信
- @retrofitを使用したファイルは、編集後すぐにビルドランナーを実行する

## 9. UI設計

### 9.1 レスポンシブデザイン
- 画面の向きや異なるデバイスサイズに対応したUI設計

### 9.2 テーマ管理
- アプリ全体のテーマはAppThemeクラスで管理
- 特殊なカラースキームはThemeExtensionを使用
- ライトモード・ダークモードの両方に対応させるため、基本的にMaterialテーマの色を使用

## 10. バージョン管理とコメント

### 10.1 コード変更の追跡
- 重要な変更には作成者・変更理由をコメントで記録
- コミットログにはプレフィックス付ける(@参考)

### 10.2 TODO管理
- TODOコメントには詳細と理由を記述
- 可能であれば解決策の方向性も記載

## 11. ログ記録

### 11.1 talkerの使用
- アプリケーション全体のログ記録にはtalkerを使用
```dart
talker.info('情報メッセージ');
talker.warning('警告メッセージ');
talker.error('エラー', stackTrace);
```

### 11.2 ログレベル
- 適切なログレベルを使い分ける（info, warning, error等）
- エラーログにはスタックトレースを含める
