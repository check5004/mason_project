/// -----------------------------------------------
/// [概要]   :テキスト変換ユーティリティクラス
/// [作成者] :TCC S.Tate
/// [作成日] :2024/11/22
/// -----------------------------------------------
///
/// 全角/半角文字の相互変換を行うユーティリティメソッドを提供します。
/// 主に以下の変換機能を提供:
/// * 全角英数字から半角英数字への変換
/// * 全角カタカナから半角カタカナへの変換
/// * 上記を組み合わせた全角文字から半角文字への一括変換
class TextConverterUtil {
  /// -----------------------------------------------
  /// 全角英数字を半角に変換するメソッド
  /// -----------------------------------------------
  ///
  /// 全角の英数字を対応する半角文字に変換します。
  ///
  /// 引数:
  /// * [text] - 変換対象の文字列
  ///
  /// 戻り値:
  /// * 半角英数字に変換された文字列
  static String toHalfWidthAlphanumeric(String text) {
    final result = text.replaceAllMapped(
      RegExp(r'[Ａ-Ｚａ-ｚ０-９]'),
      (Match match) => String.fromCharCode(match.group(0)!.codeUnitAt(0) - 0xFEE0),
    );
    return result;
  }

  /// -----------------------------------------------
  /// 全角カタカナを半角に変換するメソッド
  /// -----------------------------------------------
  ///
  /// 全角のカタカナを対応する半角カタカナに変換します。
  /// 濁点・半濁点を含むカタカナにも対応しています。
  ///
  /// 引数:
  /// * [text] - 変換対象の文字列
  ///
  /// 戻り値:
  /// * 半角カタカナに変換された文字列
  static String toHalfWidthKatakana(String text) {
    // 濁点・半濁点付きカタカナの変換マップ
    const Map<String, String> dakutenMap = {
      'ガ': 'ｶﾞ',
      'ギ': 'ｷﾞ',
      'グ': 'ｸﾞ',
      'ゲ': 'ｹﾞ',
      'ゴ': 'ｺﾞ',
      'ザ': 'ｻﾞ',
      'ジ': 'ｼﾞ',
      'ズ': 'ｽﾞ',
      'ゼ': 'ｾﾞ',
      'ゾ': 'ｿﾞ',
      'ダ': 'ﾀﾞ',
      'ヂ': 'ﾁﾞ',
      'ヅ': 'ﾂﾞ',
      'デ': 'ﾃﾞ',
      'ド': 'ﾄﾞ',
      'バ': 'ﾊﾞ',
      'ビ': 'ﾋﾞ',
      'ブ': 'ﾌﾞ',
      'ベ': 'ﾍﾞ',
      'ボ': 'ﾎﾞ',
      'パ': 'ﾊﾟ',
      'ピ': 'ﾋﾟ',
      'プ': 'ﾌﾟ',
      'ペ': 'ﾍﾟ',
      'ポ': 'ﾎﾟ',
      'ヴ': 'ｳﾞ',
    };

    // 通常のカタカナの変換マップ
    const Map<String, String> normalMap = {
      'ア': 'ｱ',
      'イ': 'ｲ',
      'ウ': 'ｳ',
      'エ': 'ｴ',
      'オ': 'ｵ',
      'カ': 'ｶ',
      'キ': 'ｷ',
      'ク': 'ｸ',
      'ケ': 'ｹ',
      'コ': 'ｺ',
      'サ': 'ｻ',
      'シ': 'ｼ',
      'ス': 'ｽ',
      'セ': 'ｾ',
      'ソ': 'ｿ',
      'タ': 'ﾀ',
      'チ': 'ﾁ',
      'ツ': 'ﾂ',
      'テ': 'ﾃ',
      'ト': 'ﾄ',
      'ナ': 'ﾅ',
      'ニ': 'ﾆ',
      'ヌ': 'ﾇ',
      'ネ': 'ﾈ',
      'ノ': 'ﾉ',
      'ハ': 'ﾊ',
      'ヒ': 'ﾋ',
      'フ': 'ﾌ',
      'ヘ': 'ﾍ',
      'ホ': 'ﾎ',
      'マ': 'ﾏ',
      'ミ': 'ﾐ',
      'ム': 'ﾑ',
      'メ': 'ﾒ',
      'モ': 'ﾓ',
      'ヤ': 'ﾔ',
      'ユ': 'ﾕ',
      'ヨ': 'ﾖ',
      'ラ': 'ﾗ',
      'リ': 'ﾘ',
      'ル': 'ﾙ',
      'レ': 'ﾚ',
      'ロ': 'ﾛ',
      'ワ': 'ﾜ',
      'ヲ': 'ｦ',
      'ン': 'ﾝ',
      'ァ': 'ｧ',
      'ィ': 'ｨ',
      'ゥ': 'ｩ',
      'ェ': 'ｪ',
      'ォ': 'ｫ',
      'ッ': 'ｯ',
      'ャ': 'ｬ',
      'ュ': 'ｭ',
      'ョ': 'ｮ',
    };

    String result = text;

    // 濁点・半濁点付きカタカナを先に変換
    dakutenMap.forEach((key, value) {
      result = result.replaceAll(key, value);
    });

    // 通常のカタカナを変換
    normalMap.forEach((key, value) {
      result = result.replaceAll(key, value);
    });

    return result;
  }

  /// -----------------------------------------------
  /// 全角記号を半角に変換するメソッド
  /// -----------------------------------------------
  static String toHalfWidthSymbols(String text) {
    const Map<String, String> symbolMap = {
      '＋': '+',
      '－': '-',
      'ー': 'ｰ',
      '―': '-',
      '‐': '-',
      '＿': '_',
      '／': '/',
      '：': ':',
      '＆': '&',
      '％': '%',
      '＃': '#',
    };

    String result = text;
    symbolMap.forEach((key, value) {
      result = result.replaceAll(key, value);
    });
    return result;
  }

  /// -----------------------------------------------
  /// ユーザー固有の変換ルールを適用するメソッド
  /// -----------------------------------------------
  static String applyCustomRules(String text) {
    const Map<String, String> customRules = {
      '−': '-', // 特殊な全角マイナス
    };

    String result = text;
    customRules.forEach((key, value) {
      result = result.replaceAll(key, value);
    });
    return result;
  }

  /// -----------------------------------------------
  /// 全角スペースを半角スペースに変換するメソッド
  /// -----------------------------------------------
  static String toHalfWidthSpace(String text) {
    return text.replaceAll('　', ' ');
  }

  /// -----------------------------------------------
  /// 全角英数字とカタカナを半角に一括変換するメソッド
  /// -----------------------------------------------
  ///
  /// 文字列内の全角英数字とカタカナを一括で半角に変換します。
  ///
  /// 引数:
  /// * [text] - 変換対象の文字列
  ///
  /// 戻り値:
  /// * 半角文字に変換された文字列
  static String toHalfWidth(String text) {
    String result = toHalfWidthAlphanumeric(text);
    result = toHalfWidthKatakana(result);
    result = toHalfWidthSymbols(result);
    result = applyCustomRules(result);
    result = toHalfWidthSpace(result);
    return result;
  }
}
